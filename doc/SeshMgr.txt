==============================================================================
------------------------------------------------------------------------------
*seshmgr.nvim* Neovim session management plugin
*SeshMgr*

MIT License Copyright (c) 2024 Marcus Ã–stling
==============================================================================

SeshMgr.nvim is a session management plugin for Neovim to save and load sessions.
I made this plugin for myself, there are many other plugins that do the same thing.
The main difference is that this plugin is that the telescope integration
lists session with timestamps and in order of last used.

# Setup ~

`require("seshmgr").setup({})` (replace `{}` with your `configuration`)


------------------------------------------------------------------------------
                                                                *SeshMgr.config*
                                `SeshMgr.config`
Plugin configuration

Default values:
>
  SeshMgr.config = {
      sessionoptions = "blank,buffers,curdir,folds,help,tabpages,winsize,winpos,terminal,localoptions",

      session_dir = vim.fn.stdpath("data") .. "/sessions",
      session_name_delimiter = "*",

      autosave_events = { "ExitPre" },
      autosave = true,

      telescope = {
          enabled = true,
          keymap = "<leader>js",
      },
  }

<

------------------------------------------------------------------------------
                                                               *SeshMgr.setup()*
                            `SeshMgr.setup`({opts})
Setup the plugin

Parameters ~
{opts} `(table)` Options to override the default configuration

Usage ~
`require("seshmgr").setup({})` (replace `{}` with your `configuration`)


==============================================================================
------------------------------------------------------------------------------
*SeshMgr.action*

Usage ~
`require("seshmgr.actions")`

------------------------------------------------------------------------------
                                                        *actions.load_session()*
                  `actions.load_session`({session_file_path})
Load a session

Parameters ~
{session_file_path} `(string)` The path to the session file

Return ~
`(boolean)` Whether the session was loaded

------------------------------------------------------------------------------
                                                           *actions.load_last()*
                       `actions.load_last`({session_dir})
Load the last session

Parameters ~
{session_dir} `(string)` The directory where the session files are saved

Return ~
`(boolean)` Whether the last session was loaded

------------------------------------------------------------------------------
                                                        *actions.load_current()*
               `actions.load_current`({session_dir}, {delimiter})
Load the current session

Parameters ~
{session_dir} `(string)` The directory where the session files are saved
{delimiter} `(string)` The delimiter used in the session file path.

Return ~
`(boolean)` Returns true if the session exists and is successfully loaded, false otherwise.

------------------------------------------------------------------------------
                                                        *actions.save_session()*
           `actions.save_session`({session_dir}, {session_file_path})
Save the current session

Parameters ~
{session_dir} `(string)` The directory where the session file will be saved
{session_file_path} `(string)` The path to the session file

Return ~
`(boolean)` Whether the session was saved

------------------------------------------------------------------------------
                                                      *actions.delete_session()*
                 `actions.delete_session`({session_file_path})
Delete a session

Parameters ~
{session_file_path} `(string)` The path to the session file

------------------------------------------------------------------------------
                                                      *actions.session_exists()*
                 `actions.session_exists`({session_file_path})
Check if a session file exists

Parameters ~
{session_file_path} `(string)` The path to the session file

Return ~
`(boolean)` Whether the session file exists

------------------------------------------------------------------------------
                                                        *actions.get_sessions()*
                     `actions.get_sessions`({session_dir})
Get all the sessions

Parameters ~
{session_dir} `(string)` The directory where the session files are saved

Return ~
`(table)` A list of sessions with name, path, time, and readable_time

------------------------------------------------------------------------------
                                               *actions.get_session_file_path()*
          `actions.get_session_file_path`({session_dir}, {delimiter})
Get the session file path

Parameters ~
{session_dir} `(string)` The directory where the session file will be saved
{delimiter} `(string)` The delimiter to use in the session file name

Return ~
`(string)` The path to the session file


==============================================================================
------------------------------------------------------------------------------
*SeshMgr.autocmds*

Usage ~
`require("seshmgr.autocmds")`

------------------------------------------------------------------------------
                                                     *autocmds.start_autosave()*
        `autocmds.start_autosave`({session_dir}, {delimiter}, {events})
Start autosaving the session

Parameters ~
{session_dir} `(string)` The directory where the session file will be saved
{delimiter} `(string)` The delimiter to use in the session file name
{events} `(table)` The events to trigger the autosave

------------------------------------------------------------------------------
                                                      *autocmds.stop_autosave()*
                           `autocmds.stop_autosave`()
Stop autosaving the session


==============================================================================
------------------------------------------------------------------------------
*SeshMgr.commands*

  - `:SessionSave` - Save the current session by current working directory (cwd).
  - `:SessionLoad {session_full_path}` - Load the given session path.
  - `:SessionLoadLast` - Load the last session.
  - `:SessionDelete {session_full_path}` - Delete the given session.
  - `:SessionDeleteCurrent` - Delete the file associated with the current session.
  - `:SessionList` - List all session files.

Usage ~
`require("seshmgr.commands")`


==============================================================================
------------------------------------------------------------------------------
                                                                     *telescope*
                                  `telescope`
*SeshMgr.telescope*

Telescope integration

Usage ~
`require("seshmgr.telescope")`

------------------------------------------------------------------------------
                                                     *telescope.setup_keymaps()*
        `telescope.setup_keymaps`({keymap}, {session_dir}, {delimiter})
Setup the telescope keymaps

Parameters ~
{keymap} `(string)` The keymap to use
{session_dir} `(string)` The directory where the session files are saved
{delimiter} `(string)` The delimiter to use in the session file name


 vim:tw=78:ts=8:noet:ft=help:norl: