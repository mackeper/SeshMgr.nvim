==============================================================================
------------------------------------------------------------------------------
*seshmgr.nvim* Neovim session management plugin
*SeshMgr*

MIT License Copyright (c) 2024 Marcus Ã–stling
==============================================================================

------------------------------------------------------------------------------
Plugin configuration

------------------------------------------------------------------------------
                                                                *SeshMgr.config*
                                `SeshMgr.config`
Default values:
>
  SeshMgr.config = {
      sessionoptions = "blank,buffers,curdir,folds,help,tabpages,winsize,winpos,terminal,localoptions",

      session_dir = vim.fn.stdpath("data") .. "/sessions",
      session_name_delimiter = "*",

      autosave_events = { "ExitPre" },
      autosave = true,

      telescope = {
          enabled = true,
          keymap = "<leader>js",
      },
  }

  -- Setup the commands
  SeshMgr._setup_commands = function()
      local commands = require("seshmgr.commands")

      commands._setup_session_save(SeshMgr.config.session_dir, SeshMgr.config.session_name_delimiter)
      commands._setup_session_load()
      commands._setup_session_load_last(SeshMgr.config.session_dir)
      commands._setup_session_delete()
      commands._setup_session_delete_current(SeshMgr.config.session_dir, SeshMgr.config.session_name_delimiter)
      commands._setup_session_list(SeshMgr.config.session_dir)
  end

  -- Setup the autocmds
  SeshMgr._setup_autocmds = function()
      local autocmds = require("seshmgr.autocmds")

      if SeshMgr.config.autosave then
          autocmds.start_autosave(
              SeshMgr.config.session_dir,
              SeshMgr.config.session_name_delimiter,
              SeshMgr.config.autosave_events
          )
      end

      -- autocmds.setup_nvimtree_fix()
  end

  -- Setup the keymaps
  SeshMgr._setup_keymaps = function()
      if SeshMgr.config.telescope.enabled then
          local telescope = require("seshmgr.telescope")
          telescope.setup_keymaps(
              SeshMgr.config.telescope.keymap,
              SeshMgr.config.session_dir,
              SeshMgr.config.session_name_delimiter
          )
      end
  end

<
# Options ~

------------------------------------------------------------------------------
                                                               *SeshMgr.setup()*
                            `SeshMgr.setup`({opts})
Setup the plugin

Parameters ~
{opts} `(table)` Options to override the default configuration

Usage ~
`require("seshmgr").setup({})` (replace `{}` with your `configuration`)


==============================================================================
------------------------------------------------------------------------------
                                                                       *actions*
                                   `actions`
*SeshMgr.action*

------------------------------------------------------------------------------
                                                        *actions.load_session()*
                  `actions.load_session`({session_file_path})
Load a session

Parameters ~
{session_file_path} `(string)` The path to the session file

------------------------------------------------------------------------------
                                                           *actions.load_last()*
                       `actions.load_last`({session_dir})
Load the last session

Parameters ~
{session_dir} `(string)` The directory where the session file will be saved

Return ~
`(boolean)` Whether the last session was loaded

------------------------------------------------------------------------------
                                                        *actions.save_session()*
           `actions.save_session`({session_dir}, {session_file_name})
Save the current session

Parameters ~
{session_dir} `(string)` The directory where the session file will be saved
{session_file_name} `(string)` The name of the session file

Return ~
`(boolean)` Whether the session was saved

------------------------------------------------------------------------------
                                                      *actions.delete_session()*
                 `actions.delete_session`({session_file_path})
Delete a session

Parameters ~
{session_file_path} `(string)` The path to the session file

------------------------------------------------------------------------------
                                                      *actions.session_exists()*
                 `actions.session_exists`({session_file_path})
Check if a session file exists

Parameters ~
{session_file_path} `(string)` The path to the session file

Return ~
`(boolean)` Whether the session file exists

------------------------------------------------------------------------------
                                                        *actions.get_sessions()*
                     `actions.get_sessions`({session_dir})
Get all the sessions

Parameters ~
{session_dir} `(string)` The directory where the session files are saved

Return ~
`(table)` A list of sessions with name, path, time, and readable_time

------------------------------------------------------------------------------
                                               *actions.get_session_file_path()*
          `actions.get_session_file_path`({session_dir}, {delimiter})
Get the session file path

Parameters ~
{session_dir} `(string)` The directory where the session file will be saved
{delimiter} `(string)` The delimiter to use in the session file name

Return ~
`(string)` The path to the session file


==============================================================================
------------------------------------------------------------------------------
                                                                      *autocmds*
                                   `autocmds`
*SeshMgr.autocmds*

------------------------------------------------------------------------------
                                                     *autocmds.start_autosave()*
        `autocmds.start_autosave`({session_dir}, {delimiter}, {events})
Start autosaving the session

Parameters ~
{session_dir} `(string)` The directory where the session file will be saved
{delimiter} `(string)` The delimiter to use in the session file name
{events} `(table)` The events to trigger the autosave

------------------------------------------------------------------------------
                                                      *autocmds.stop_autosave()*
                           `autocmds.stop_autosave`()
Stop autosaving the session


==============================================================================
------------------------------------------------------------------------------
                                                                      *commands*
                                   `commands`
*SeshMgr.commands*
Only contains private functions to setup the commands


==============================================================================
------------------------------------------------------------------------------
                                                                     *telescope*
                                  `telescope`
*SeshMgr.telescope*

Telescope integration

------------------------------------------------------------------------------
                                                     *telescope.setup_keymaps()*
        `telescope.setup_keymaps`({keymap}, {session_dir}, {delimiter})
Setup the telescope keymaps

Parameters ~
{keymap} `(string)` The keymap to use
{session_dir} `(string)` The directory where the session files are saved
{delimiter} `(string)` The delimiter to use in the session file name


 vim:tw=78:ts=8:noet:ft=help:norl:

